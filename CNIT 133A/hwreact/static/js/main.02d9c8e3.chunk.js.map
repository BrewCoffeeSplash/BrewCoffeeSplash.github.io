{"version":3,"sources":["components/cart.jsx","components/mycounter.jsx","components/lstcounters.jsx","App.js","serviceWorker.js","index.js"],"names":["Cart","props","className","href","totalItems","MyCounter","this","setBadgeClasses","counter","course","formatCt","onClick","onIncrement","onDelete","id","badgeclasses","value","Component","LstCounters","onClearCounters","counters","map","key","App","handleAddButton","tempcounters","data","i","indexOf","setState","handleDeleteButton","countersId","index","findIndex","c","splice","handleClearCounters","ct","Fragment","item","reduce","prev","next","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4iBAaeA,EAXF,SAACC,GACV,OACA,yBAAKC,UAAU,8BACX,uBAAGA,UAAU,eAAeC,KAAK,KAC7B,sDACI,uDACR,0BAAMD,UAAU,+BAA+BD,EAAMG,eC+B9CC,E,iLAnCD,IAAD,OAGL,OAEI,6BAEI,0BAAMH,UAAWI,KAAKC,mBAAoBD,KAAKL,MAAMO,QAAQC,QAC7D,0BAAMP,UAAWI,KAAKC,mBAAoBD,KAAKI,YAE/C,4BAAQC,QAAS,kBAAM,EAAKV,MAAMW,YAAY,EAAKX,MAAMO,UAAUN,UAAU,0BAA7E,kBACA,4BAAQS,QAAS,kBAAM,EAAKV,MAAMY,SAAS,EAAKZ,MAAMO,QAAQM,KAAKZ,UAAU,8BAA7E,mB,wCAOR,IAAIa,EAAe,aAEnB,OADAA,GAA8C,IAA7BT,KAAKL,MAAMO,QAAQQ,MAAe,eAAiB,e,mCAI1D,IACFA,EAAUV,KAAKL,MAAMQ,OAArBO,MACR,OAAiB,IAAVA,EAAc,OAASA,I,iCAGtB,IACAA,EAAUV,KAAKL,MAAMO,QAArBQ,MACR,OAAiB,IAAVA,EAAc,OAASA,M,GAhCdC,aCoBTC,E,iLAjBD,IAAD,OACL,OAAQ,6BACJ,4BAAQhB,UAAU,6BAA6BS,QAASL,KAAKL,MAAMkB,iBAAnE,kBACCb,KAAKL,MAAMmB,SAASC,KAAI,SAAAb,GAAO,OAC3B,kBAAC,EAAD,CACGc,IAAKd,EAAQM,GAGbN,QAASA,EACTK,SAAU,EAAKZ,MAAMY,SACrBD,YAAa,EAAKX,MAAMW,sB,GAZlBK,a,iPCuEXM,E,2MArDbC,gBAAkB,SAAAhB,GAEhB,IAAMiB,EAAeC,EACfC,EAAIF,EAAaG,QAAQpB,GAE/BiB,EAAaE,G,yVAAb,IAAuBnB,GAEvBiB,EAAaE,GAAGX,QAEhB,EAAKa,SAAS,CAAET,SAAUK,K,EAG5BK,mBAAqB,SAACC,GACpB,IAAMN,EAAeC,EACfM,EAAQN,EAAKO,WAAU,SAAAC,GAAC,OAAIA,EAAEpB,KAAOiB,KACvCC,GAAS,GACXP,EAAaU,OAAOH,EAAO,GAC7B,EAAKH,SAAS,CAAET,SAAUK,K,EAQ5BW,oBAAsB,WACpB,IAAMX,EAAeC,EAAKL,KAAI,SAAAgB,GAE5B,OADAA,EAAGrB,MAAQ,EACJqB,KAET,EAAKR,SAAS,CAAET,SAAUK,K,wEAI1B,OACE,kBAAC,IAAMa,SAAP,KACE,kBAAC,EAAD,CAAMlC,WAAYsB,EAAKL,KACrB,SAAAkB,GAAI,OACFA,EAAKvB,SAAOwB,QAAO,SAACC,EAAMC,GAAP,OAAgBD,EAAOC,OAC9C,0BAAMxC,UAAU,aAEd,kBAAC,EAAD,CACEkB,SAAUM,EACVP,gBAAiBb,KAAK8B,oBACtBvB,SAAUP,KAAKwB,mBACflB,YAAaN,KAAKkB,wB,GA5DZP,aCME0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.02d9c8e3.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Cart = (props) => {\r\n    return (\r\n    <nav className=\"navbar navbar-dark bg-dark\">\r\n        <a className=\"navbar-brand\" href=\"#\">\r\n            <h1>Course Enrollment Cart</h1>\r\n                <span>Total of Enrollments </span>\r\n        <span className=\"badge badge-pill badge-info\">{props.totalItems}</span>\r\n        </a>\r\n    </nav>);\r\n};\r\n\r\nexport default Cart;","import React, { Component } from 'react';\r\n\r\nclass MyCounter extends Component {\r\n\r\n    render() {\r\n        //console.log('props', this.props);\r\n        //console.log(this.props);\r\n        return (\r\n            \r\n            <div>\r\n                \r\n                <span className={this.setBadgeClasses()}>{this.props.counter.course}</span>\r\n                <span className={this.setBadgeClasses()}>{this.formatCt()}</span>\r\n\r\n                <button onClick={() => this.props.onIncrement(this.props.counter)} className=\"btn btn-primary btn-sm\">Add Enrollment</button>\r\n                <button onClick={() => this.props.onDelete(this.props.counter.id)} className=\"btn btn-warning btn-sm m-3\">Cancel Class</button>\r\n            </div>\r\n        );\r\n    };\r\n\r\n    // use danger on course names as well\r\n    setBadgeClasses() {\r\n        let badgeclasses = \"badge m-3 \";\r\n        badgeclasses += (this.props.counter.value === 0) ? \"badge-danger\" : \"badge-info\";\r\n        return badgeclasses;\r\n    };\r\n\r\n    coursename() {\r\n        const { value } = this.props.course;\r\n        return value === 0 ? \"Zero\" : value;\r\n    };\r\n\r\n    formatCt() {\r\n        const { value } = this.props.counter;\r\n        return value === 0 ? \"Zero\" : value;\r\n    };\r\n}\r\n\r\n\r\nexport default MyCounter;","import React, { Component } from 'react';\r\nimport MyCounter from './mycounter';\r\n\r\nclass LstCounters extends Component {\r\n\r\n    render() {\r\n        return (<div>\r\n            <button className=\"btn btn-primary btn-sm m-3\" onClick={this.props.onClearCounters} >Clear Counters</button>\r\n            {this.props.counters.map(counter =>\r\n                (<MyCounter \r\n                    key={counter.id}\r\n                    // value={counter.value} id={counter.id}\r\n                    //  passing the whole object encapsulated instead of passing each proper of array seperately ^^\r\n                    counter={counter}\r\n                    onDelete={this.props.onDelete}\r\n                    onIncrement={this.props.onIncrement}\r\n                />\r\n                ))}\r\n        </div>)\r\n    }\r\n}\r\n\r\nexport default LstCounters;","import React, { Component } from 'react';\nimport Cart from './components/cart';\nimport LstCounters from './components/lstcounters';\nimport './App.css';\nimport data from './courses.json';\n\nclass App extends Component {\n  // state = {\n  //   counters: [\n  //     { id: 1, value: 0, course: \"React JS vs Angular\" },\n  //     { id: 2, value: 0, course: \"ASP.NET Core or Node JS?\" },\n  //     { id: 3, value: 0, course: \"Lifecycle of React JS Components\" },\n  //     { id: 4, value: 0, course: \"Comparing JavaScript Libraries/Frame works\" }\n  //   ]\n  // };\n  //state[] = courses.state.map();\n\n  //state = [data];\n\n  // binding events via constructor is heavy, \n  //handleAddButton rewritten as an arrow function,  comment out constructor part\n  handleAddButton = counter => {\n    //way to clone an array, same objects as state.counters\n    const tempcounters = data;\n    const i = tempcounters.indexOf(counter);\n    //to not update state directly we have diff object than one in state\n    tempcounters[i] = { ...counter };\n    // updating values of tempcounters instead of state.counters\n    tempcounters[i].value++;\n    //let react update state.counters w/ values from new tempcounters array\n    this.setState({ counters: tempcounters });\n  };\n\n  handleDeleteButton = (countersId) => {\n    const tempcounters = data;\n    const index = data.findIndex(c => c.id === countersId);\n    if (index >= 0) {\n      tempcounters.splice(index, 1);}\n    this.setState({ counters: tempcounters });\n  };\n\n  // handleDeleteButton = (countersId) => {\n  //   const tempcounters = this.state.counters.filter(c => c.id !== countersId);\n  //   this.setState({ counters: tempcounters });\n  // };\n\n  handleClearCounters = () => {\n    const tempcounters = data.map(ct => {\n      ct.value = 0;\n      return ct;\n    });\n    this.setState({ counters: tempcounters })\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <Cart totalItems={data.map(\n          item =>\n            item.value).reduce((prev, next) => prev + next)} />\n        <main className=\"container\">\n          \n          <LstCounters\n            counters={data}\n            onClearCounters={this.handleClearCounters}\n            onDelete={this.handleDeleteButton}\n            onIncrement={this.handleAddButton} />\n\n        </main>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}